package com.hahaton.ai;

import com.hahaton.config.GeminiConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@DisplayName("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Gemini AI")
class GeminiServiceTest {

    @Mock
    private GeminiConfig geminiConfig;
    
    private GeminiService geminiService;
    
    @BeforeEach
    @DisplayName("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    void setUp() {
        geminiService = new GeminiService(geminiConfig);
    }
    
    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É")
    void shouldReturnRandomTip() {
        // When
        String tip = geminiService.getRandomTip();
        
        // Then
        assertThat(tip).isNotNull();
        assertThat(tip).isNotEmpty();
        assertThat(tip).matches("^[üí°üöÄüîçüìöüéØü§ùüìñ‚ö°].*");
    }
    
    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    void shouldReturnTipFromPredefinedList() {
        // When
        String tip = geminiService.getRandomTip();
        
        // Then
        assertThat(tip).isIn(
            "üí° –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã",
            "üöÄ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∞–∂–Ω–µ–µ —Ç–µ–æ—Ä–∏–∏ - –ø–∏—à–∏—Ç–µ –∫–æ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üîç –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è",
            "üìö –ò–∑—É—á–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–¥ - —ç—Ç–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫—Ä—É–≥–æ–∑–æ—Ä",
            "üéØ –°—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ - –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥",
            "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
        );
    }
}
