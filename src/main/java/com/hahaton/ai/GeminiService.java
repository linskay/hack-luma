package com.hahaton.ai;

import com.hahaton.config.GeminiConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

@Service
public class GeminiService {
    
    private final GeminiConfig geminiConfig;
    private final RestTemplate restTemplate;
    
    @Autowired
    public GeminiService(GeminiConfig geminiConfig) {
        this.geminiConfig = geminiConfig;
        this.restTemplate = new RestTemplate();
    }
    
    public String generateResponse(String question) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
            Map<String, Object> requestBody = new HashMap<>();
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø—Ä–æ—Å–∞
            Map<String, Object> content = new HashMap<>();
            content.put("parts", new Object[]{
                Map.of("text", buildPrompt(question))
            });
            
            requestBody.put("contents", new Object[]{content});
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            Map<String, Object> generationConfig = new HashMap<>();
            generationConfig.put("maxOutputTokens", geminiConfig.getMaxTokens());
            generationConfig.put("temperature", geminiConfig.getTemperature());
            generationConfig.put("topP", 0.8);
            generationConfig.put("topK", 40);
            
            requestBody.put("generationConfig", generationConfig);
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∏ –∫–ª—é—á–∞
            String apiKey = safeTrim(geminiConfig.getApiKey());
            String apiUrl = safeTrim(geminiConfig.getApiUrl());
            String model = safeTrim(geminiConfig.getModelName());
            if (apiUrl == null || apiUrl.isEmpty()) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                String m = (model == null || model.isEmpty()) ? "gemini-pro" : model;
                apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/" + m + ":generateContent";
            }
            if (apiKey == null || apiKey.isEmpty()) {
                System.err.println("Gemini API key is empty. Set GEMINI_API_KEY or gemini.api.key property.");
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–ª—é—á API Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
            }
            if (!apiUrl.startsWith("http")) {
                System.err.println("Gemini API URL is invalid: " + apiUrl);
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (URL). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            }
            
            // URL —Å API –∫–ª—é—á–æ–º
            String url = apiUrl + "?key=" + apiKey;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            ResponseEntity<Map> response = restTemplate.postForEntity(url, request, Map.class);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                return extractResponse(response.getBody());
            } else {
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            }
            
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: " + e.getMessage());
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
    }
    
    private String buildPrompt(String question) {
        return String.format(
            "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—É—á–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. " +
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. " +
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —ç—Ç—É —Ç–µ–º—É. " +
            "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s",
            question
        );
    }
    
    private String extractResponse(Map responseBody) {
        try {
            if (responseBody.containsKey("candidates")) {
                Object[] candidates = (Object[]) responseBody.get("candidates");
                if (candidates.length > 0) {
                    Map candidate = (Map) candidates[0];
                    if (candidate.containsKey("content")) {
                        Map content = (Map) candidate.get("content");
                        if (content.containsKey("parts")) {
                            Object[] parts = (Object[]) content.get("parts");
                            if (parts.length > 0) {
                                Map part = (Map) parts[0];
                                if (part.containsKey("text")) {
                                    return (String) part.get("text");
                                }
                            }
                        }
                    }
                }
            }
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.";
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ AI.";
        }
    }
    
    public String getRandomTip() {
        String[] tips = {
            "üí° –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã",
            "üöÄ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∞–∂–Ω–µ–µ —Ç–µ–æ—Ä–∏–∏ - –ø–∏—à–∏—Ç–µ –∫–æ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üîç –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è",
            "üìö –ò–∑—É—á–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–¥ - —ç—Ç–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫—Ä—É–≥–æ–∑–æ—Ä",
            "üéØ –°—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ - –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥",
            "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
        };
        
        return tips[(int) (Math.random() * tips.length)];
    }

    private String safeTrim(String s) {
        return s == null ? null : s.trim();
    }
}
