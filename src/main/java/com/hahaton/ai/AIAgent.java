package com.hahaton.ai;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class AIAgent {
    
    private final GeminiService geminiService;
    private final DJLService djlService;
    private Map<String, String> trainingResponses;
    
    @Autowired
    public AIAgent(GeminiService geminiService, DJLService djlService) {
        this.geminiService = geminiService;
        this.djlService = djlService;
        initializeResponses();
    }
    
    private void initializeResponses() {
        trainingResponses = new HashMap<>();
        trainingResponses.put("java", "Java - —ç—Ç–æ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è.");
        trainingResponses.put("spring", "Spring Framework - —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Java. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, AOP, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.");
        trainingResponses.put("react", "React - —ç—Ç–æ JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π DOM.");
        trainingResponses.put("maven", "Maven - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.");
        trainingResponses.put("git", "Git - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π. –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ.");
        trainingResponses.put("docker", "Docker - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø–∞–∫–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.");
        trainingResponses.put("sql", "SQL - —ç—Ç–æ —è–∑—ã–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º.");
        trainingResponses.put("api", "API (Application Programming Interface) - —ç—Ç–æ –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏. REST API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP –º–µ—Ç–æ–¥—ã.");
        trainingResponses.put("html", "HTML - —ç—Ç–æ —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
        trainingResponses.put("css", "CSS - —ç—Ç–æ —è–∑—ã–∫ —Å—Ç–∏–ª–µ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.");
        trainingResponses.put("python", "Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ AI, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
        trainingResponses.put("javascript", "JavaScript - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Node.js). –û—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.");
        trainingResponses.put("typescript", "TypeScript - —ç—Ç–æ –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ JavaScript —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω Microsoft –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∫–æ–¥–∞.");
        trainingResponses.put("node", "Node.js - —ç—Ç–æ —Å—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JavaScript –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.");
        trainingResponses.put("database", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã: —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ (MySQL, PostgreSQL) –∏ NoSQL (MongoDB, Redis).");
        trainingResponses.put("algorithm", "–ê–ª–≥–æ—Ä–∏—Ç–º - —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –û—Å–Ω–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –Ω–∞—É–∫–∏.");
        trainingResponses.put("framework", "–§—Ä–µ–π–º–≤–æ—Ä–∫ - —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.");
        trainingResponses.put("library", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - —ç—Ç–æ –Ω–∞–±–æ—Ä –≥–æ—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.");
        
        // –î–æ–±–∞–≤–ª—è–µ–º DevOps –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ–º—ã
        trainingResponses.put("docker", "Docker - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø–∞–∫–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.");
        trainingResponses.put("git", "Git - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π. –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ, —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.");
        trainingResponses.put("bash", "Bash - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ Unix/Linux. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á, –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.");
        trainingResponses.put("linux", "Linux - —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ —è–¥—Ä–∞ Linux. –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
        trainingResponses.put("kubernetes", "Kubernetes - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.");
    }
    
    public String getResponse(String question) {
        if (question == null || question.trim().isEmpty()) {
            return "–ü—Ä–∏–≤–µ—Ç! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—É—á–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! üöÄ –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏!";
        }
        
        String lowerQuestion = question.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        String topic = determineTopic(lowerQuestion);
        if (topic != null && trainingResponses.containsKey(topic)) {
            return trainingResponses.get(topic);
        }
        
        // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å DJL –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        String generalResponse = generateGeneralResponse(question);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (generalResponse.contains("–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!") || generalResponse.contains("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä")) {
            return generalResponse + "\n\nü§ñ –Ø –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω –Ω–∞ –≤—Å–µ —Ç–µ–º—ã, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å! –í –±—É–¥—É—â–µ–º —è —Å—Ç–∞–Ω—É –µ—â–µ —É–º–Ω–µ–µ –∏ —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.";
        }
        
        return generalResponse;
    }
    
    private String determineTopic(String question) {
        if (question.contains("java") || question.contains("–¥–∂–∞–≤–∞")) return "java";
        if (question.contains("spring") || question.contains("—Å–ø—Ä–∏–Ω–≥")) return "spring";
        if (question.contains("react") || question.contains("—Ä–µ–∞–∫—Ç")) return "react";
        if (question.contains("maven") || question.contains("–º–∞–≤–µ–Ω")) return "maven";
        if (question.contains("git") || question.contains("–≥–∏—Ç")) return "git";
        if (question.contains("docker") || question.contains("–¥–æ–∫–µ—Ä")) return "docker";
        if (question.contains("sql") || question.contains("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")) return "sql";
        if (question.contains("api") || question.contains("–≤–µ–±")) return "api";
        if (question.contains("html") || question.contains("—Ö—Ç–º–ª")) return "html";
        if (question.contains("css") || question.contains("—Å—Ç–∏–ª–∏")) return "css";
        if (question.contains("python") || question.contains("–ø–∏—Ç–æ–Ω")) return "python";
        if (question.contains("javascript") || question.contains("–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç")) return "javascript";
        if (question.contains("typescript")) return "typescript";
        if (question.contains("node") || question.contains("–Ω–æ–¥")) return "node";
        if (question.contains("database") || question.contains("–±–∞–∑–∞")) return "database";
        if (question.contains("algorithm") || question.contains("–∞–ª–≥–æ—Ä–∏—Ç–º")) return "algorithm";
        if (question.contains("framework") || question.contains("—Ñ—Ä–µ–π–º–≤–æ—Ä–∫")) return "framework";
        if (question.contains("library") || question.contains("–±–∏–±–ª–∏–æ—Ç–µ–∫–∞")) return "library";
        if (question.contains("bash") || question.contains("–±–∞—à")) return "bash";
        if (question.contains("linux") || question.contains("–ª–∏–Ω—É–∫—Å")) return "linux";
        if (question.contains("kubernetes") || question.contains("–∫—É–±–µ—Ä–Ω–µ—Ç–∏—Å") || question.contains("k8s")) return "kubernetes";
        
        return null;
    }
    
    private String generateGeneralResponse(String question) {
        if (question.contains("–∫–∞–∫") || question.contains("how")) {
            return "–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –ù–∞—á–∞—Ç—å —Å –æ—Å–Ω–æ–≤ —è–∑—ã–∫–∞, 2) –†–µ—à–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, 3) –ò–∑—É—á–∞—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, 4) –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏!";
        }
        
        if (question.contains("—á—Ç–æ") || question.contains("what")) {
            return "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –û–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!";
        }
        
        if (question.contains("–ø–æ—á–µ–º—É") || question.contains("why")) {
            return "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —Ä–µ—à–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ IT!";
        }
        
        return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≥–ª—É–±–ª—è–π—Ç–µ—Å—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –æ–±–ª–∞—Å—Ç–∏!";
    }
    
    public String getRandomTip() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ Gemini
        String[] tips = {
            "üí° –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã",
            "üöÄ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∞–∂–Ω–µ–µ —Ç–µ–æ—Ä–∏–∏ - –ø–∏—à–∏—Ç–µ –∫–æ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üîç –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è",
            "üìö –ò–∑—É—á–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–¥ - —ç—Ç–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫—Ä—É–≥–æ–∑–æ—Ä",
            "üéØ –°—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ - –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥",
            "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
        };
        
        return tips[(int) (Math.random() * tips.length)];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö AI –∞–≥–µ–Ω—Ç–∞
     */
    public Map<String, Object> getCapabilities() {
        Map<String, Object> capabilities = new HashMap<>();
        capabilities.put("gemini", "Google Gemini API –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤");
        capabilities.put("djl", "Deep Java Library –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏");
        capabilities.put("models", "–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤");
        capabilities.put("languages", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Java, Python, JavaScript –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è");
        return capabilities;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    public Map<String, Object> getServiceStatus() {
        Map<String, Object> status = new HashMap<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            String testResponse = geminiService.generateResponse("test");
            if (testResponse != null && !testResponse.contains("–∫–ª—é—á API Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")) {
                status.put("gemini", "available");
            } else {
                status.put("gemini", "not_configured");
            }
        } catch (Exception e) {
            status.put("gemini", "not_available");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º DJL
        try {
            Map<String, Object> djlHealth = djlService.healthCheck();
            Object success = djlHealth.get("success");
            status.put("djl", Boolean.TRUE.equals(success) ? "available" : "error");
        } catch (Exception e) {
            status.put("djl", "error: " + e.getMessage());
        }
        
        return status;
    }
}
