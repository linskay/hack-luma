package com.hahaton.controller;

import com.hahaton.ai.AIAgent;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/ai")
@CrossOrigin(origins = "*")
@Tag(name = "AI Assistant", description = "API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
public class AIController {
    
    private final AIAgent aiAgent;
    
    @Autowired
    public AIController(AIAgent aiAgent) {
        this.aiAgent = aiAgent;
    }
    
    @PostMapping("/chat")
    @Operation(
        summary = "–ß–∞—Ç —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
        description = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Map.class),
                examples = @ExampleObject(
                    value = "{\"response\": \"Java - —ç—Ç–æ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è.\"}"
                )
            )
        )
    })
    public ResponseEntity<Map<String, String>> chat(
        @Parameter(description = "–í–æ–ø—Ä–æ—Å –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞", required = true, example = "–ß—Ç–æ —Ç–∞–∫–æ–µ Java?")
        @RequestBody Map<String, String> request
    ) {
        String question = request.get("question");
        String response = aiAgent.getResponse(question);
        
        return ResponseEntity.ok(Map.of("response", response));
    }
    
    @GetMapping("/tip")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Map.class),
                examples = @ExampleObject(
                    value = "{\"tip\": \"üí° –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã\"}"
                )
            )
        )
    })
    public ResponseEntity<Map<String, String>> getRandomTip() {
        String tip = aiAgent.getRandomTip();
        return ResponseEntity.ok(Map.of("tip", tip));
    }
    
    @GetMapping("/health")
    @Operation(
        summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞",
        description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AI –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "AI –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Map.class),
                examples = @ExampleObject(
                    value = "{\"status\": \"AI Agent is running!\"}"
                )
            )
        )
    })
    public ResponseEntity<Map<String, String>> health() {
        return ResponseEntity.ok(Map.of("status", "AI Agent is running!"));
    }
    
    @GetMapping("/capabilities")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∞–≥–µ–Ω—Ç–∞",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö AI –∞–≥–µ–Ω—Ç–æ–º"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Map.class),
                examples = @ExampleObject(
                    value = "{\"gemini\": \"Google Gemini API –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\", \"djl\": \"Deep Java Library –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏\", \"models\": \"–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\", \"languages\": \"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Java, Python, JavaScript –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\"}"
                )
            )
        )
    })
    public ResponseEntity<Map<String, Object>> getCapabilities() {
        Map<String, Object> capabilities = aiAgent.getCapabilities();
        return ResponseEntity.ok(capabilities);
    }
    
    @GetMapping("/status")
    @Operation(
        summary = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤",
        description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤, –≤–∫–ª—é—á–∞—è DJL –∏ Gemini (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Map.class),
                examples = @ExampleObject(
                    value = "{\"gemini\": \"not_configured\", \"djl\": \"available\"}"
                )
            )
        )
    })
    public ResponseEntity<Map<String, Object>> getServiceStatus() {
        Map<String, Object> status = aiAgent.getServiceStatus();
        return ResponseEntity.ok(status);
    }
}
