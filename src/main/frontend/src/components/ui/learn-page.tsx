import React, { useState, useEffect } from 'react'
import { GradientButton } from './gradient-button'
import { AIHelper } from './ai-helper'
import { MorphingSquare } from './morphing-square'
import { motion, AnimatePresence } from 'framer-motion'
import { ChevronDown, BookOpen, Dumbbell, Library, GitBranch, Database, Terminal, Ship, Server, Code, Globe, Shield } from 'lucide-react'

interface LearnPageProps {
  onNavigate: (page: string) => void
  isLoading: boolean
  currentSubPage?: string
}

export function LearnPage({ onNavigate, isLoading, currentSubPage = 'courses' }: LearnPageProps) {
  const [activeSection, setActiveSection] = useState<string>(currentSubPage)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentSubPage
  useEffect(() => {
    if (currentSubPage && currentSubPage !== activeSection) {
      setActiveSection(currentSubPage)
    }
  }, [currentSubPage, activeSection])

  const sections = [
    { id: 'courses', title: '–ö—É—Ä—Å—ã', icon: BookOpen, color: 'from-blue-500 to-cyan-500' },
    { id: 'trainers', title: '–¢—Ä–µ–Ω–∞–∂–µ—Ä—ã', icon: Dumbbell, color: 'from-green-500 to-emerald-500' },
    { id: 'library', title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', icon: Library, color: 'from-purple-500 to-pink-500' }
  ]

  const courses = [
    {
      id: 'java-basics',
      title: '–û—Å–Ω–æ–≤—ã Java',
      description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Java',
      duration: '8 –Ω–µ–¥–µ–ª—å',
      level: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      topics: ['–ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã', '–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º', '–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è'],
      color: 'from-blue-500 to-cyan-500',
      icon: '‚òï'
    },
    {
      id: 'spring-framework',
      title: 'Spring Framework',
      description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Spring',
      duration: '10 –Ω–µ–¥–µ–ª—å',
      level: '–°—Ä–µ–¥–Ω–∏–π',
      topics: ['IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'AOP', 'Spring Boot', 'REST API'],
      color: 'from-green-500 to-emerald-500',
      icon: 'üå±'
    },
    {
      id: 'react-development',
      title: 'React —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã',
      duration: '6 –Ω–µ–¥–µ–ª—å',
      level: '–°—Ä–µ–¥–Ω–∏–π',
      topics: ['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', '–•—É–∫–∏', '–†–æ—É—Ç–∏–Ω–≥', 'State Management'],
      color: 'from-purple-500 to-pink-500',
      icon: '‚öõÔ∏è'
    },
    {
      id: 'database-design',
      title: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î',
      description: '–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö',
      duration: '4 –Ω–µ–¥–µ–ª–∏',
      level: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      topics: ['ER –º–æ–¥–µ–ª–∏', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è', 'SQL', '–ò–Ω–¥–µ–∫—Å—ã'],
      color: 'from-orange-500 to-red-500',
      icon: 'üóÑÔ∏è'
    }
  ]

  const trainers = [
    {
      id: 'git',
      title: 'Git & GitHub',
      description: '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      exercises: 15,
      color: 'from-orange-500 to-red-500',
      icon: GitBranch
    },
    {
      id: 'kubernetes',
      title: 'Kubernetes',
      description: '–û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
      difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
      exercises: 20,
      color: 'from-blue-500 to-indigo-500',
      icon: Ship
    },
    {
      id: 'sql',
      title: 'SQL & –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      description: '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö',
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      exercises: 18,
      color: 'from-green-500 to-teal-500',
      icon: Database
    },
    {
      id: 'bash',
      title: 'Bash & Linux',
      description: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      exercises: 12,
      color: 'from-purple-500 to-pink-500',
      icon: Terminal
    },
    {
      id: 'docker',
      title: 'Docker',
      description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      exercises: 16,
      color: 'from-cyan-500 to-blue-500',
      icon: Server
    },
    {
      id: 'devops',
      title: 'DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏',
      description: 'CI/CD –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
      difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
      exercises: 22,
      color: 'from-yellow-500 to-orange-500',
      icon: Code
    }
  ]

  const libraryItems = [
    {
      id: 'web-dev',
      title: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      description: 'HTML, CSS, JavaScript, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏',
      resources: 45,
      color: 'from-blue-500 to-purple-500',
      icon: Globe
    },
    {
      id: 'mobile-dev',
      title: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      description: 'React Native, Flutter, –Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      resources: 38,
      color: 'from-green-500 to-blue-500',
      icon: Code
    },
    {
      id: 'ai-ml',
      title: 'AI & Machine Learning',
      description: '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏',
      resources: 52,
      color: 'from-purple-500 to-pink-500',
      icon: Shield
    }
  ]

  const currentSection = sections.find(s => s.id === activeSection)

  return (
    <div className="min-h-screen">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-6xl mx-auto p-8 pt-32">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-white mb-4">–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</h1>
          <p className="text-white/70 text-lg">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –≤ IT!</p>
        </div>

        {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ */}
        <div className="relative mb-12">
          <motion.button
            onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            className="relative w-full max-w-md mx-auto bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300 group"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className={`w-12 h-12 bg-gradient-to-r ${currentSection?.color} rounded-xl flex items-center justify-center`}>
                  {currentSection && <currentSection.icon className="w-6 h-6 text-white" />}
                </div>
                <div className="text-left">
                  <h3 className="text-xl font-semibold text-white">{currentSection?.title}</h3>
                  <p className="text-white/60 text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è</p>
                </div>
              </div>
              <motion.div
                animate={{ rotate: isDropdownOpen ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                <ChevronDown className="w-6 h-6 text-white/60" />
              </motion.div>
            </div>
          </motion.button>

          <AnimatePresence>
            {isDropdownOpen && (
              <motion.div
                initial={{ opacity: 0, y: -20, scale: 0.95 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: -20, scale: 0.95 }}
                transition={{ duration: 0.3, ease: "easeOut" }}
                className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 w-full max-w-md z-50"
              >
                <div className="bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20 overflow-hidden">
                  {sections.map((section, index) => (
                    <motion.button
                      key={section.id}
                      onClick={() => {
                        setActiveSection(section.id)
                        setIsDropdownOpen(false)
                      }}
                      className={`w-full p-4 flex items-center space-x-4 hover:bg-white/10 transition-all duration-200 ${
                        activeSection === section.id ? 'bg-white/20' : ''
                      } ${index !== sections.length - 1 ? 'border-b border-white/10' : ''}`}
                      whileHover={{ x: 10 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className={`w-10 h-10 bg-gradient-to-r ${section.color} rounded-lg flex items-center justify-center`}>
                        <section.icon className="w-5 h-5 text-white" />
                      </div>
                      <span className="text-white font-medium">{section.title}</span>
                    </motion.button>
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–æ–≤ */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeSection}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.5 }}
          >
            {/* –ö—É—Ä—Å—ã */}
            {activeSection === 'courses' && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {courses.map((course, index) => (
                  <motion.div
                    key={course.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 cursor-pointer group"
                  >
                    <div className={`w-16 h-16 bg-gradient-to-r ${course.color} rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>
                      <span className="text-white text-2xl">{course.icon}</span>
                    </div>
                    
                    <h3 className="text-xl font-semibold text-white mb-2">{course.title}</h3>
                    <p className="text-white/70 text-sm mb-4">{course.description}</p>
                    
                    <div className="flex items-center justify-between mb-4">
                      <span className="text-white/60 text-sm">{course.duration}</span>
                      <span className="px-3 py-1 bg-white/20 rounded-full text-white text-xs">{course.level}</span>
                    </div>
                    
                    <div className="space-y-2 mb-4">
                      {course.topics.slice(0, 3).map((topic, index) => (
                        <div key={index} className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                          <span className="text-white/80 text-sm">{topic}</span>
                        </div>
                      ))}
                      {course.topics.length > 3 && (
                        <div className="text-white/60 text-sm">+{course.topics.length - 3} —Ç–µ–º</div>
                      )}
                    </div>
                    
                    <GradientButton variant="variant" size="sm" className="w-full">
                      –ù–∞—á–∞—Ç—å –∫—É—Ä—Å
                    </GradientButton>
                  </motion.div>
                ))}
              </div>
            )}

            {/* –¢—Ä–µ–Ω–∞–∂–µ—Ä—ã */}
            {activeSection === 'trainers' && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {trainers.map((trainer, index) => (
                  <motion.div
                    key={trainer.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 cursor-pointer group"
                  >
                    <div className={`w-16 h-16 bg-gradient-to-r ${trainer.color} rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>
                      <trainer.icon className="w-8 h-8 text-white" />
                    </div>
                    
                    <h3 className="text-xl font-semibold text-white mb-2">{trainer.title}</h3>
                    <p className="text-white/70 text-sm mb-4">{trainer.description}</p>
                    
                    <div className="flex items-center justify-between mb-4">
                      <span className="px-3 py-1 bg-white/20 rounded-full text-white text-xs">{trainer.difficulty}</span>
                      <span className="text-white/60 text-sm">{trainer.exercises} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</span>
                    </div>
                    
                    <GradientButton variant="variant" size="sm" className="w-full">
                      –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    </GradientButton>
                  </motion.div>
                ))}
              </div>
            )}

            {/* –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ */}
            {activeSection === 'library' && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {libraryItems.map((item, index) => (
                  <motion.div
                    key={item.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 cursor-pointer group"
                  >
                    <div className={`w-16 h-16 bg-gradient-to-r ${item.color} rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>
                      <item.icon className="w-8 h-8 text-white" />
                    </div>
                    
                    <h3 className="text-xl font-semibold text-white mb-2">{item.title}</h3>
                    <p className="text-white/70 text-sm mb-4">{item.description}</p>
                    
                    <div className="flex items-center justify-between mb-4">
                      <span className="text-white/60 text-sm">{item.resources} —Ä–µ—Å—É—Ä—Å–æ–≤</span>
                    </div>
                    
                    <GradientButton variant="variant" size="sm" className="w-full">
                      –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                    </GradientButton>
                  </motion.div>
                ))}
              </div>
            )}
          </motion.div>
        </AnimatePresence>
      </div>
      
      {/* –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50">
          <MorphingSquare message="–ó–∞–≥—Ä—É–∑–∫–∞..." />
        </div>
      )}
      
      {/* AI –ü–æ–º–æ—â–Ω–∏–∫ */}
      <AIHelper />
    </div>
  )
}
