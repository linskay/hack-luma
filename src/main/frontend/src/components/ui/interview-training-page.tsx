import React, { useState } from 'react'
import { AIHelper } from './ai-helper'
import { MorphingSquare } from './morphing-square'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  User, 
  MessageSquare, 
  Brain, 
  Star, 
  Clock, 
  CheckCircle, 
  AlertCircle,
  Play,
  Pause,
  RotateCcw,
  Download
} from 'lucide-react'

interface InterviewTrainingPageProps {
  onNavigate: (page: string) => void
  isLoading: boolean
}

export function InterviewTrainingPage({ onNavigate, isLoading }: InterviewTrainingPageProps) {
  const [selectedGrade, setSelectedGrade] = useState<string>('')
  const [selectedSpecialty, setSelectedSpecialty] = useState<string>('')
  const [isInterviewStarted, setIsInterviewStarted] = useState(false)
  const [isInterviewPaused, setIsInterviewPaused] = useState(false)
  const [currentQuestion, setCurrentQuestion] = useState<string>('')
  const [userAnswer, setUserAnswer] = useState<string>('')
  const [interviewHistory, setInterviewHistory] = useState<Array<{question: string, answer: string}>>([])
  const [feedback, setFeedback] = useState<string>('')
  const [isFeedbackReady, setIsFeedbackReady] = useState(false)

  const grades = [
    { id: 'junior', title: 'Junior', description: '0-2 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞', color: 'from-green-500 to-emerald-500' },
    { id: 'middle', title: 'Middle', description: '2-4 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞', color: 'from-blue-500 to-cyan-500' },
    { id: 'senior', title: 'Senior', description: '4+ –ª–µ—Ç –æ–ø—ã—Ç–∞', color: 'from-purple-500 to-pink-500' },
    { id: 'lead', title: 'Lead', description: '5+ –ª–µ—Ç + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', color: 'from-orange-500 to-red-500' }
  ]

  const specialties = [
    { id: 'frontend', title: 'Frontend Developer', icon: 'üíª', color: 'from-blue-500 to-cyan-500' },
    { id: 'backend', title: 'Backend Developer', icon: '‚öôÔ∏è', color: 'from-green-500 to-emerald-500' },
    { id: 'fullstack', title: 'Full Stack Developer', icon: 'üöÄ', color: 'from-purple-500 to-pink-500' },
    { id: 'devops', title: 'DevOps Engineer', icon: 'üîß', color: 'from-orange-500 to-red-500' },
    { id: 'data', title: 'Data Scientist', icon: 'üìä', color: 'from-indigo-500 to-blue-500' },
    { id: 'mobile', title: 'Mobile Developer', icon: 'üì±', color: 'from-teal-500 to-green-500' }
  ]

  const sampleQuestions = {
    junior: {
      frontend: [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–∞–∑–Ω–∏—Ü–µ –º–µ–∂–¥—É let, const –∏ var –≤ JavaScript",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ DOM –∏ –∫–∞–∫ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ React"
      ],
      backend: [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ REST API?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É GET –∏ POST –∑–∞–ø—Ä–æ—Å–∞–º–∏",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞—á–µ–º –æ–Ω–∞ –Ω—É–∂–Ω–∞?"
      ],
      fullstack: [
        "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ –¥–ª—è frontend –∏ backend?",
        "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ HTTP –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?"
      ]
    },
    middle: {
      frontend: [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ö—É–∫–∞—Ö –≤ React –∏ –∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ",
        "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ TypeScript –∏ –µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?"
      ],
      backend: [
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞?"
      ],
      fullstack: [
        "–ö–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É fullstack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
      ]
    },
    senior: {
      frontend: [
        "–ö–∞–∫ –≤—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É frontend?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö state management",
        "–ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥–µ?"
      ],
      backend: [
        "–ö–∞–∫ –≤—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç–µ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
      ],
      fullstack: [
        "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
        "–ö–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤?"
      ]
    }
  }

  const startInterview = () => {
    if (!selectedGrade || !selectedSpecialty) return
    
    setIsInterviewStarted(true)
    setIsInterviewPaused(false)
    setInterviewHistory([])
    setFeedback('')
    setIsFeedbackReady(false)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    const questions = sampleQuestions[selectedGrade as keyof typeof sampleQuestions]?.[selectedSpecialty as keyof typeof sampleQuestions.junior] || []
    if (questions.length > 0) {
      setCurrentQuestion(questions[0])
    }
  }

  const pauseInterview = () => {
    setIsInterviewPaused(true)
  }

  const resumeInterview = () => {
    setIsInterviewPaused(false)
  }

  const submitAnswer = () => {
    if (!userAnswer.trim()) return
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    setInterviewHistory(prev => [...prev, { question: currentQuestion, answer: userAnswer }])
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const questions = sampleQuestions[selectedGrade as keyof typeof sampleQuestions]?.[selectedSpecialty as keyof typeof sampleQuestions.junior] || []
    const currentIndex = interviewHistory.length
    if (currentIndex < questions.length - 1) {
      setCurrentQuestion(questions[currentIndex + 1])
    } else {
      // –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      generateFeedback()
    }
    
    setUserAnswer('')
  }

  const generateFeedback = () => {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ò–ò
    const grade = grades.find(g => g.id === selectedGrade)?.title
    const specialty = specialties.find(s => s.id === selectedSpecialty)?.title
    
    const feedbackText = `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${specialty} —É—Ä–æ–≤–Ω—è ${grade}!

–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚úÖ –õ–æ–≥–∏—á–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é

–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
üîß –£–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ ${specialty}
üîß –ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
üîß –ò–∑—É—á–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
üìö –ò–∑—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ ${specialty}
üíª –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
ü§ù –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ open source –ø—Ä–æ–µ–∫—Ç–∞—Ö
üìñ –ß–∏—Ç–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –±–ª–æ–≥–∏ –∏ —Å—Ç–∞—Ç—å–∏

–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${Math.floor(Math.random() * 20 + 70)}/100

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∏ —É –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ`

    setFeedback(feedbackText)
    setIsFeedbackReady(true)
    setIsInterviewStarted(false)
  }

  const resetInterview = () => {
    setSelectedGrade('')
    setSelectedSpecialty('')
    setIsInterviewStarted(false)
    setIsInterviewPaused(false)
    setCurrentQuestion('')
    setUserAnswer('')
    setInterviewHistory([])
    setFeedback('')
    setIsFeedbackReady(false)
  }

  const downloadFeedback = () => {
    const element = document.createElement('a')
    const file = new Blob([feedback], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `feedback_${selectedSpecialty}_${selectedGrade}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  if (isLoading) {
    return (
      <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50">
        <MorphingSquare message="–ó–∞–≥—Ä—É–∑–∫–∞..." />
      </div>
    )
  }

  return (
    <div className="min-h-screen">
      <div className="max-w-6xl mx-auto p-8 pt-32">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-white mb-4">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π</h1>
          <p className="text-white/70 text-lg">–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å –ò–ò –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</p>
        </div>

        {!isInterviewStarted && !isFeedbackReady && (
          <div className="space-y-8">
            {/* –í—ã–±–æ—Ä –≥—Ä–µ–π–¥–∞ */}
            <div>
              <h2 className="text-2xl font-bold text-white mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {grades.map((grade) => (
                  <motion.div
                    key={grade.id}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setSelectedGrade(grade.id)}
                    className={`bg-white/10 backdrop-blur-sm rounded-xl p-6 border-2 cursor-pointer transition-all duration-300 ${
                      selectedGrade === grade.id 
                        ? 'border-white/50 bg-white/20' 
                        : 'border-white/20 hover:bg-white/15'
                    }`}
                  >
                    <div className={`w-16 h-16 bg-gradient-to-r ${grade.color} rounded-xl flex items-center justify-center mx-auto mb-4`}>
                      <User className="w-8 h-8 text-white" />
                    </div>
                    <h3 className="text-xl font-semibold text-white text-center mb-2">{grade.title}</h3>
                    <p className="text-white/70 text-sm text-center">{grade.description}</p>
                  </motion.div>
                ))}
              </div>
            </div>

            {/* –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ */}
            {selectedGrade && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <h2 className="text-2xl font-bold text-white mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {specialties.map((specialty) => (
                    <motion.div
                      key={specialty.id}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setSelectedSpecialty(specialty.id)}
                      className={`bg-white/10 backdrop-blur-sm rounded-xl p-6 border-2 cursor-pointer transition-all duration-300 ${
                        selectedSpecialty === specialty.id 
                          ? 'border-white/50 bg-white/20' 
                          : 'border-white/20 hover:bg-white/15'
                      }`}
                    >
                      <div className={`w-16 h-16 bg-gradient-to-r ${specialty.color} rounded-xl flex items-center justify-center mx-auto mb-4`}>
                        <span className="text-white text-2xl">{specialty.icon}</span>
                      </div>
                      <h3 className="text-xl font-semibold text-white text-center">{specialty.title}</h3>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ */}
            {selectedGrade && selectedSpecialty && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="text-center"
              >
                <button
                  onClick={startInterview}
                  className="px-8 py-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-medium rounded-xl transition-all duration-300 hover:scale-105 shadow-lg flex items-center space-x-2 mx-auto"
                >
                  <Play className="w-5 h-5" />
                  <span>–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</span>
                </button>
              </motion.div>
            )}
          </div>
        )}

        {/* –ò–Ω—Ç–µ—Ä–≤—å—é */}
        {isInterviewStarted && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-6"
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é */}
            <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/30">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-white">–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</h2>
                  <p className="text-white/70">
                    {grades.find(g => g.id === selectedGrade)?.title} {specialties.find(s => s.id === selectedSpecialty)?.title}
                  </p>
                </div>
                <div className="flex items-center space-x-3">
                  {isInterviewPaused ? (
                    <button
                      onClick={resumeInterview}
                      className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-all duration-300 flex items-center space-x-2"
                    >
                      <Play className="w-4 h-4" />
                      <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                    </button>
                  ) : (
                    <button
                      onClick={pauseInterview}
                      className="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg transition-all duration-300 flex items-center space-x-2"
                    >
                      <Pause className="w-4 h-4" />
                      <span>–ü–∞—É–∑–∞</span>
                    </button>
                  )}
                  <button
                    onClick={resetInterview}
                    className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-all duration-300 flex items-center space-x-2"
                  >
                    <RotateCcw className="w-4 h-4" />
                    <span>–°–±—Ä–æ—Å</span>
                  </button>
                </div>
              </div>
            </div>

            {/* –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
                  <MessageSquare className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-white">–í–æ–ø—Ä–æ—Å {interviewHistory.length + 1}</h3>
                  <p className="text-white/60 text-sm">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞</p>
                </div>
              </div>
              
              <div className="bg-white/5 rounded-xl p-4 mb-4">
                <p className="text-white text-lg">{currentQuestion}</p>
              </div>

              <div className="space-y-4">
                <textarea
                  value={userAnswer}
                  onChange={(e) => setUserAnswer(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                  className="w-full h-32 bg-white/10 border border-white/20 rounded-xl p-4 text-white placeholder-white/50 resize-none focus:outline-none focus:border-white/40"
                  disabled={isInterviewPaused}
                />
                
                <button
                  onClick={submitAnswer}
                  disabled={!userAnswer.trim() || isInterviewPaused}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-medium rounded-xl transition-all duration-300 hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                </button>
              </div>
            </div>

            {/* –ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é */}
            {interviewHistory.length > 0 && (
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
                <h3 className="text-xl font-semibold text-white mb-4">–ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é</h3>
                <div className="space-y-4">
                  {interviewHistory.map((item, index) => (
                    <div key={index} className="border-l-2 border-blue-500 pl-4">
                      <div className="bg-white/5 rounded-xl p-4">
                        <p className="text-white/80 text-sm mb-2">
                          <strong>–í–æ–ø—Ä–æ—Å {index + 1}:</strong>
                        </p>
                        <p className="text-white mb-3">{item.question}</p>
                        <p className="text-white/80 text-sm mb-2">
                          <strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong>
                        </p>
                        <p className="text-white">{item.answer}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </motion.div>
        )}

        {/* –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å */}
        {isFeedbackReady && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-6"
          >
            <div className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 backdrop-blur-sm rounded-2xl p-6 border border-green-500/30">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center">
                  <Brain className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ò–ò</h2>
                  <p className="text-white/70">–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</p>
                </div>
              </div>

              <div className="bg-white/10 rounded-xl p-6 mb-6">
                <pre className="text-white whitespace-pre-wrap font-sans">{feedback}</pre>
              </div>

              <div className="flex justify-center space-x-4">
                <button
                  onClick={downloadFeedback}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-medium rounded-xl transition-all duration-300 hover:scale-105 shadow-lg flex items-center space-x-2"
                >
                  <Download className="w-5 h-5" />
                  <span>–°–∫–∞—á–∞—Ç—å –æ—Ç–∑—ã–≤</span>
                </button>
                <button
                  onClick={resetInterview}
                  className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-medium rounded-xl transition-all duration-300 hover:scale-105 shadow-lg flex items-center space-x-2"
                >
                  <RotateCcw className="w-5 h-5" />
                  <span>–ù–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</span>
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </div>

      {/* AI –ü–æ–º–æ—â–Ω–∏–∫ */}
      <AIHelper />
    </div>
  )
}
